memory:
    - [ ] use bitmaps for pmm, memory monitoring and debuggin will be easier
    - bitmap.h will contain code for atomic operations on bitmaps
    - pool.h will allow the creation of arbitrary pools of objects managed with bitmaps
    - bitops.h if necessary

spinlocks:
    - good spinlocks with debugging info
    - use them where appropriate

Interrupts:
    - NMI entries from MADT
    - interrupt priorities (TPR, lowest priority...)
    - make sure LAPIC/IOAPIC code is good
    - scheduling

cleanup:
    - remove identity mapping
    - unmap unecessary zones
    - cleanup boot code

AOC for kernel:
    - write a simple memory manager (a stack) for managing large arrays of objects (structs)
      this will probably use macros and typeof

CPUID:
    - give detailed cpu information

PMM:
    - use zones for DMA

SSE:
    - optimized memory functions
    - context switching (save and restore XMM registers if necessary)

DMA
CMOS
RTC
HPET

drivers:
    - enumerate pci devices
    - ps2 controller driver
    - keyboard driver
    - mouse driver

GUI
