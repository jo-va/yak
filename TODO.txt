- Map AOD section read-only using a single zeroed-out page
In the page fault handler, check if the address comes from the AOD region and allocate a frame and map it
to the faulting address.
- Verify the kernel mapping, check if everything is good.
- PMM: can i use atomic operations instead of having a small stack per-cpu ?
- Do the percpu areas need to be consecutive ? if not, the memory can be initialized earlier and the percpu areas created from alloc_frame() and then mapped

Points that are primordial. Design solid interfaces and test extensively:
    - interrupts (lapic/ioapic)
    - memory management (frame allocator, virtual memory, kernel memory with AOD)
    - scheduling
    - ipc (messages, shared memory)

memory:
    - bitmap.h will contain code for atomic operations on bitmaps
    - bitops.h if necessary

spinlocks:
    - good spinlocks with debugging info
    - use them where appropriate

Interrupts:
    - NMI entries from MADT
    - interrupt priorities (TPR, lowest priority...)
    - make sure LAPIC/IOAPIC code is good
    - scheduling

cleanup:
    - remove identity mapping
    - unmap unecessary zones
    - cleanup boot code

AOD for kernel:
    - write a simple memory manager (a stack) for managing large arrays of objects (structs)
      this will probably use macros and typeof

CPUID:
    - give detailed cpu information

PMM:
    - use zones for DMA

SSE:
    - optimized memory functions
    - context switching (save and restore XMM registers if necessary)

DMA
CMOS
RTC
HPET

drivers:
    - enumerate pci devices
    - ps2 controller driver
    - keyboard driver
    - mouse driver

GUI
